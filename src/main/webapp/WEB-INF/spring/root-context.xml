<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
  	<context:property-placeholder location="classpath:datasource.properties"/> 
	
	
	
	<!-- datasource & mybatis 설정 -->
  	<bean class="org.apache.commons.dbcp.BasicDataSource" id="realDataSource" destroy-method="close">
		<property name="driverClassName" value="${datasource.driverClassName}"/>
		<property name="url" value="${datasource.url}"/>
		<property name="username" value="${datasource.username}"/>
		<property name="password" value="${datasource.password}"/>
	</bean> 
	
	<!-- log4jdbc-remix의 가짜 dataSource빈 생성 -->
   	<bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="realDataSource"/>
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE"/>
				<property name="sqlPrefix" value="[SQL] "/>
			</bean>
		</property>
	</bean>
 
<!-- 	
   	<bean class="oracle.ucp.jdbc.PoolDataSourceImpl" id="dataSource" >
		<property name="user" value="lara" />
		<property name="password" value="fiigo1324AAA" />
		<property name="URL"
			value="jdbc:oracle:thin:@blossomdata?TNS_ADMIN=./src/main/resources/Wallet_BLOSSOMDATA" />
		<property value="oracle.jdbc.pool.OracleDataSource" name="connectionFactoryClassName" />
		<property name="maxPoolSize" value="50" />
		<property name="initialPoolSize" value="15" />
	</bean>
 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath*:mapper/**/*-mapper.xml"/>
	</bean>

	
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryBean"/>
	</bean>
	
	<!-- #6.2 @Mapper 인터페이스 등록. 해당인터페이스 구현 객체를 동적으로 생성해서 빈으로 사용. -->
	<mybatis-spring:scan base-package="com.hr.laraworld.**.dao"/>
	
	<!-- #12. 트랜잭션 처리를 위한 매니져 빈 등록 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- @Transactional 어노테이션이 붙은 메소드 대상으로 Transaction advice 삽입 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
</beans>
